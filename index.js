const express = require('express');
let models = require('./models');
let app = express();
app.use(express.urlencoded({
	extended: true
}));
app.use(express.json());
app.use(express.static('./public'));
app.set('views', './views');
app.set('view engine', 'pug');
var port=3000;

app.locals.db = models.mongoose.connection;
app.locals.db.on('error', console.error.bind(console, 'MongoDB connection error:'));

app.get('/', (req, res) => {
	res.render('home');
})

app.get('/products', (req, res) => {
	// page that shows all the products available in a list format and on clicking on each item the user can view product details
	// add the db part of the code , i'll edit the front end accordingly
	res.render('product');
})
app.post('/products', (req, res) => {
	res.send();
})

app.get('/addProduct',(req, res) => {
//Add products page
	res.render('addProduct');
})
app.post('/addProduct', (req, res) => {
	// we are taking productName,productId,batch and expiry date in yyyy-mm-dd
	// send message added successfully and redirect to the products page
	// increase the product count and map to stack id in stackProductSchema
	// we should probably do joi validation here
	// name and batch are required. Expiry is not. id is autogenerated
	
	var prod = {
		name: req.body.productName,
		batch: new Date(req.body.batch)
	}
	if (req.body.expiry) {
		prod.expiry = req.body.expiry
	}
	prod = new models.Product(prod)
	var validation_errors = prod.validateSync()
	if (validation_errors) { 
		// Check out 
		// https://mongoosejs.com/docs/validation.html
		// i'm redirecting to the form page with the message
		//res.send('Improper form data')
		res.render('addProduct',{message:'Improper form data'});
	} 
	else {
		console.log(prod)
		models.Product.findOne({
			name: prod.name,
			batch: prod.batch
		})
		.then(product => {
			console.log(product);
			if (product) {
				res.render('addProduct',{message:'This product already exists'});
			} 
			else {
				prod.save()
				.then(() => {
					res.send('Success')
					//Shouldn't we redirect to /products page after this?
				})
				.catch(err => {
					console.error(err);
					res.send('Whoops. Something happened')
				})
			}
		})
	}
	// res.send();
})

app.get('/deleteProduct', (req,res) => {
	//delete products page
	res.render('deleteProduct');
})
app.post('/deleteProduct', (req, res) => {
		//we are taking productId and a confirmation that if you really wanna delete the product
		//send message deleted successfully and redirect to the products page
		res.send();
})

app.get('/products/:id',(req,res)=>{
    var id=req.params.id;
	//extract product details based on the id
	//get stack details and count of products by comparing product id in stackProductMapSchema
	Promise.all(
		[
			models.Product.findOne({
				_id: id
			}),
			models.StackProductMap.find({
					product: id
				})
				.populate('stack')
		]
	)
	.then(([product, stackmapdetails]) => {
		// res.render('productDetails', {product,stackmapdetails})
		res.send({product, stackmapdetails})
	})
	.catch(err => {
		console.error(err);
		res.send('Whoops. Something happened')
	})
})

app.get('/bots', (req, res) => {
	// query bots for location here.
	// pass locations to render
	res.render('bots');
})
app.get('/bot/:id',(req,res)=>{
	var id=req.params.id;
	//extract bot location and it's status active or not 
	res.render('botDetails',{botDetails});
})
app.get('/sensors', (req, res) => {
	res.render('sensors');
})

app.get('*',(req,res)=>{
	res.send("This is not a valid URL");
	});
app.post('*',(req,res)=>{
	res.send("This is not a valid URL");
	});

app.locals.db.once('open', () => {
	let PORT = process.env.PORT || 3000
	app.listen(PORT, () => {
		console.log(`Server is running on Port: ${PORT}`);
	})
})
	